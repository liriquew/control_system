openapi: 3.0.0
info:
  title: Time Management API
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: Auth
    description: Аутентификация и регистрация
  - name: Tasks
    description: Управление задачами
  - name: Groups
    description: Управление группами и участниками
  - name: Group Tasks Graph
    description: Управление зависимостями задач
paths:
  # Auth Endpoints
  /auth/signin:
    post:
      tags: [Auth]
      summary: Аутентификация пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'

  /auth/signup:
    post:
      tags: [Auth]
      summary: Регистрация нового пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'

  # Tasks Endpoints (REST)
  /tasks:
    get:
      tags: [Tasks]
      summary: Получить список задач
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: limit
          required: true
          schema:
            type: integer
          description: ID задачи
        - in: query
          name: offset
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Список задач
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

    post:
      tags: [Tasks]
      summary: Создать новую задачу
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Задача создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskID'

  /tasks/{id}:
    get:
      tags: [Tasks]
      summary: Получить задачу по ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID задачи
      responses:
        '200':
          description: Детали задачи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

    put:
      tags: [Tasks]
      summary: Обновить задачу
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID задачи
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Задача обновлена

    delete:
      tags: [Tasks]
      summary: Удалить задачу
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID задачи
      responses:
        '204':
          description: Задача удалена

  /tasks/predict:
    get:
      tags: [Tasks]
      summary: Прогнозирование времени выполнения
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: planned_time
          required: true
          schema:
            type: number
            format: float
      responses:
        '200':
          description: Прогнозируемое время
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActualTime'
                  
  # Groups Endpoints
  /groups:
    post:
      tags: [Groups]
      summary: Создать новую группу
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
      responses:
        '201':
          description: Группа создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          headers:
            Location:
              schema:
                type: string
              description: URI созданной группы

    get:
      tags: [Groups]
      summary: Получить список групп пользователя
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список групп
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'

  /groups/{groupId}:
    get:
      tags: [Groups]
      summary: Получить информацию о группе
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Информация о группе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDetails'
        '403':
          description: Нет доступа к группе
        '404':
          description: Группа не найдена

    delete:
      tags: [Groups]
      summary: Удалить группу
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Группа удалена
        '403':
          description: Недостаточно прав
          
    patch:
      tags: [Groups]
      summary: Изменить группу
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Группа изменена
        '403':
          description: Недостаточно прав

  /groups/{groupId}/members:
    get:
      tags: [Groups]
      summary: Получить список участников группы
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список участников
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupMember'

    post:
      tags: [Groups]
      summary: Добавить участника в группу
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMemberAdd'
      responses:
        '201':
          description: Участник добавлен

  /groups/{groupId}/members/{userId}:
    delete:
      tags: [Groups]
      summary: Удалить участника из группы
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Участник удален
        '403':
          description: Недостаточно прав
  
  /groups/{groupId}/members/{userId}/role:
    patch:
      tags: [Groups]
      summary: Изменить роль участника
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
        - in: path
          name: userId
          required: true
          schema:
            type: integer
        - in: query
          name: newRole
          required: true
          schema:
            type: string
            enum: [admin, editor, member, viewer]
      responses:
        '204':
          description: Участник удален
        '403':
          description: Недостаточно прав

  /groups/{groupId}/graphs:
    post:
      tags: [Groups]
      summary: Создать граф задач в группе
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskGraphCreate'
      responses:
        '201':
          description: Граф создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskGraph'

    get:
      tags: [Groups]
      summary: Получить список графов группы
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список графов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskGraph'

  #  Task Graph Endpoints
  /graphs/{id}:
    get:
      tags: [Group Tasks Graph]
      summary: Получить граф задач
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID графа
      responses:
        '200':
          description: Граф задач
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskGraph'
        '404':
          description: Граф не найден

  /graphs/{graphId}/nodes:
    post:
      tags: [Group Tasks Graph]
      summary: Создать узел в графе
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: graphId
          required: true
          schema:
            type: integer
          description: ID графа
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeCreate'
      responses:
        '201':
          description: Узел создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'

  /graphs/{graphId}/nodes/{nodeId}:
    delete:
      tags: [Group Tasks Graph]
      summary: Удалить узел
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: nodeId
          required: true
          schema:
            type: integer
          description: ID зависимой задачи
        - in: path
          name: graphId
          required: true
          schema:
            type: integer
          description: ID графа
      responses:
        '204':
          description: Узел удален
    patch:
      tags: [Group Tasks Graph]
      summary: Обновить узел
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: nodeId
          required: true
          schema:
            type: integer
          description: ID зависимой задачи
        - in: path
          name: graphId
          required: true
          schema:
            type: integer
          description: ID графа
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeCreate'
      responses:
        '204':
          description: Узел обновлен

  /graphs/{graphId}/nodes/{nodeId}/dependencies:
    get:
      tags: [Group Tasks Graph]
      summary: Получить зависимости задачи
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: nodeId
          required: true
          schema:
            type: integer
          description: ID зависимой задачи
        - in: path
          name: graphId
          required: true
          schema:
            type: integer
          description: ID графа
      responses:
        '200':
          description: Список зависимостей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'

  /graphs/{graphId}/nodes/{nodeId}/dependencies/{dependencyNodeId}:
    post:
      tags: [Group Tasks Graph]
      summary: Добавить зависимость
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: nodeId
          required: true
          schema:
            type: integer
          description: ID зависимой задачи
        - in: path
          name: graphId
          required: true
          schema:
            type: integer
          description: ID графа
        - in: path
          name: dependencyNodeId
          required: true
          schema:
            type: integer
          description: ID задачи-зависимости
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dependency'
      responses:
        '201':
          description: Зависимость добавлена
    delete:
      tags: [Group Tasks Graph]
      summary: Удалить зависимость
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: nodeId
          required: true
          schema:
            type: integer
          description: ID зависимой задачи
        - in: path
          name: graphId
          required: true
          schema:
            type: integer
          description: ID графа
        - in: path
          name: dependencyNodeId
          required: true
          schema:
            type: integer
          description: ID задачи-зависимости
      responses:
        '204':
          description: Зависимость удалена
          

components:
  schemas:
    UserCredentials:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          example: "user123"
        password:
          type: string
          example: "pass123"

    JWTToken:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        planned_time:
          type: number
          format: float
        actual_time:
          type: number
          format: float
        dependencies:
          type: array
          items:
            type: integer
            format: int64

    TaskCreate:
      type: object
      required: [title]
      properties:
        title:
          type: string
        description:
          type: string
        planned_time:
          type: number
          format: float

    TaskUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        actual_time:
          type: number
          format: float

    TaskID:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123

    Dependency:
      type: object
      required: [dependency_id]
      properties:
        dependency_id:
          type: integer
          format: int64
          example: 456

    TaskGraph:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        edges:
          type: array
          items:
            type: object
            properties:
              from:
                type: integer
                format: int64
              to:
                type: integer
                format: int64

    GroupCreate:
      type: object
      required: [name]
      properties:
        name:
          type: string
          example: "Проект Alpha"
        description:
          type: string
          example: "Основной проект команды"

    Group:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        owner_id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time

    GroupDetails:
      allOf:
        - $ref: '#/components/schemas/Group'
        - type: object
          properties:
            members:
              type: array
              items:
                $ref: '#/components/schemas/GroupMember'

    GroupMember:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        username:
          type: string
        role:
          type: string
          enum: [admin, editor, member, viewer]

    GroupMemberAdd:
      type: object
      required: [user_id]
      properties:
        user_id:
          type: integer
          format: int64
        role:
          type: string
          enum: [admin, editor, member, viewer]
          default: member

    TaskGraphCreate:
      type: object
      properties:
        name:
          type: string
          example: "Основной граф задач"

    Node:
      type: object
      properties:
        id:
          type: integer
          format: int64
        graph_id:
          type: integer
          format: int64
        task_id:
          type: integer
          format: int64
        assigned_to:
          type: integer
          format: int64
        dependencies:
          type: array
          items:
            type: integer
            format: int64

    NodeCreate:
      type: object
      required: [task_id]
      properties:
        task_id:
          type: integer
          format: int64
        assigned_to:
          type: integer
          format: int64

    NodeDependency:
      type: object
      required: [target_node_id]
      properties:
        target_node_id:
          type: integer
          format: int64

    ActualTime:
      type: object
      properties:
        actual_time:
          type: number
          format: float
          example: 10.5

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT