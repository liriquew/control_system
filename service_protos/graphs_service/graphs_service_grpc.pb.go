// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.1
// source: graphs_service/graphs_service.proto

package graphs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GraphsClient is the client API for Graphs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphsClient interface {
	CreateGroupGraph(ctx context.Context, in *GraphWithNodes, opts ...grpc.CallOption) (*GraphResponse, error)
	ListGroupGraphs(ctx context.Context, in *ListGroupGraphsRequest, opts ...grpc.CallOption) (*GraphListResponse, error)
	GetGraph(ctx context.Context, in *GetGraphRequest, opts ...grpc.CallOption) (*GraphWithNodes, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveNode(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDependencies(ctx context.Context, in *GetDependenciesRequest, opts ...grpc.CallOption) (*NodeWithDependencies, error)
	AddDependency(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveDependency(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PredictGraph(ctx context.Context, in *PredictGraphRequest, opts ...grpc.CallOption) (*PredictedGraphResponse, error)
	TaskInNode(ctx context.Context, in *TaskInNodeRequest, opts ...grpc.CallOption) (*TaskInNodeResponse, error)
}

type graphsClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphsClient(cc grpc.ClientConnInterface) GraphsClient {
	return &graphsClient{cc}
}

func (c *graphsClient) CreateGroupGraph(ctx context.Context, in *GraphWithNodes, opts ...grpc.CallOption) (*GraphResponse, error) {
	out := new(GraphResponse)
	err := c.cc.Invoke(ctx, "/graphs.Graphs/CreateGroupGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphsClient) ListGroupGraphs(ctx context.Context, in *ListGroupGraphsRequest, opts ...grpc.CallOption) (*GraphListResponse, error) {
	out := new(GraphListResponse)
	err := c.cc.Invoke(ctx, "/graphs.Graphs/ListGroupGraphs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphsClient) GetGraph(ctx context.Context, in *GetGraphRequest, opts ...grpc.CallOption) (*GraphWithNodes, error) {
	out := new(GraphWithNodes)
	err := c.cc.Invoke(ctx, "/graphs.Graphs/GetGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphsClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/graphs.Graphs/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphsClient) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/graphs.Graphs/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphsClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/graphs.Graphs/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphsClient) RemoveNode(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/graphs.Graphs/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphsClient) GetDependencies(ctx context.Context, in *GetDependenciesRequest, opts ...grpc.CallOption) (*NodeWithDependencies, error) {
	out := new(NodeWithDependencies)
	err := c.cc.Invoke(ctx, "/graphs.Graphs/GetDependencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphsClient) AddDependency(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/graphs.Graphs/AddDependency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphsClient) RemoveDependency(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/graphs.Graphs/RemoveDependency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphsClient) PredictGraph(ctx context.Context, in *PredictGraphRequest, opts ...grpc.CallOption) (*PredictedGraphResponse, error) {
	out := new(PredictedGraphResponse)
	err := c.cc.Invoke(ctx, "/graphs.Graphs/PredictGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphsClient) TaskInNode(ctx context.Context, in *TaskInNodeRequest, opts ...grpc.CallOption) (*TaskInNodeResponse, error) {
	out := new(TaskInNodeResponse)
	err := c.cc.Invoke(ctx, "/graphs.Graphs/TaskInNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphsServer is the server API for Graphs service.
// All implementations must embed UnimplementedGraphsServer
// for forward compatibility
type GraphsServer interface {
	CreateGroupGraph(context.Context, *GraphWithNodes) (*GraphResponse, error)
	ListGroupGraphs(context.Context, *ListGroupGraphsRequest) (*GraphListResponse, error)
	GetGraph(context.Context, *GetGraphRequest) (*GraphWithNodes, error)
	GetNode(context.Context, *GetNodeRequest) (*NodeResponse, error)
	CreateNode(context.Context, *CreateNodeRequest) (*NodeResponse, error)
	UpdateNode(context.Context, *UpdateNodeRequest) (*emptypb.Empty, error)
	RemoveNode(context.Context, *RemoveNodeRequest) (*emptypb.Empty, error)
	GetDependencies(context.Context, *GetDependenciesRequest) (*NodeWithDependencies, error)
	AddDependency(context.Context, *DependencyRequest) (*emptypb.Empty, error)
	RemoveDependency(context.Context, *DependencyRequest) (*emptypb.Empty, error)
	PredictGraph(context.Context, *PredictGraphRequest) (*PredictedGraphResponse, error)
	TaskInNode(context.Context, *TaskInNodeRequest) (*TaskInNodeResponse, error)
	mustEmbedUnimplementedGraphsServer()
}

// UnimplementedGraphsServer must be embedded to have forward compatible implementations.
type UnimplementedGraphsServer struct {
}

func (UnimplementedGraphsServer) CreateGroupGraph(context.Context, *GraphWithNodes) (*GraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupGraph not implemented")
}
func (UnimplementedGraphsServer) ListGroupGraphs(context.Context, *ListGroupGraphsRequest) (*GraphListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupGraphs not implemented")
}
func (UnimplementedGraphsServer) GetGraph(context.Context, *GetGraphRequest) (*GraphWithNodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraph not implemented")
}
func (UnimplementedGraphsServer) GetNode(context.Context, *GetNodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedGraphsServer) CreateNode(context.Context, *CreateNodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedGraphsServer) UpdateNode(context.Context, *UpdateNodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedGraphsServer) RemoveNode(context.Context, *RemoveNodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (UnimplementedGraphsServer) GetDependencies(context.Context, *GetDependenciesRequest) (*NodeWithDependencies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDependencies not implemented")
}
func (UnimplementedGraphsServer) AddDependency(context.Context, *DependencyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDependency not implemented")
}
func (UnimplementedGraphsServer) RemoveDependency(context.Context, *DependencyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDependency not implemented")
}
func (UnimplementedGraphsServer) PredictGraph(context.Context, *PredictGraphRequest) (*PredictedGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictGraph not implemented")
}
func (UnimplementedGraphsServer) TaskInNode(context.Context, *TaskInNodeRequest) (*TaskInNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskInNode not implemented")
}
func (UnimplementedGraphsServer) mustEmbedUnimplementedGraphsServer() {}

// UnsafeGraphsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphsServer will
// result in compilation errors.
type UnsafeGraphsServer interface {
	mustEmbedUnimplementedGraphsServer()
}

func RegisterGraphsServer(s grpc.ServiceRegistrar, srv GraphsServer) {
	s.RegisterService(&Graphs_ServiceDesc, srv)
}

func _Graphs_CreateGroupGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphWithNodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphsServer).CreateGroupGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphs.Graphs/CreateGroupGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphsServer).CreateGroupGraph(ctx, req.(*GraphWithNodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graphs_ListGroupGraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupGraphsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphsServer).ListGroupGraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphs.Graphs/ListGroupGraphs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphsServer).ListGroupGraphs(ctx, req.(*ListGroupGraphsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graphs_GetGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphsServer).GetGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphs.Graphs/GetGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphsServer).GetGraph(ctx, req.(*GetGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graphs_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphsServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphs.Graphs/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphsServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graphs_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphsServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphs.Graphs/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphsServer).CreateNode(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graphs_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphsServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphs.Graphs/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphsServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graphs_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphsServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphs.Graphs/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphsServer).RemoveNode(ctx, req.(*RemoveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graphs_GetDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDependenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphsServer).GetDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphs.Graphs/GetDependencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphsServer).GetDependencies(ctx, req.(*GetDependenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graphs_AddDependency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DependencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphsServer).AddDependency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphs.Graphs/AddDependency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphsServer).AddDependency(ctx, req.(*DependencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graphs_RemoveDependency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DependencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphsServer).RemoveDependency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphs.Graphs/RemoveDependency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphsServer).RemoveDependency(ctx, req.(*DependencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graphs_PredictGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphsServer).PredictGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphs.Graphs/PredictGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphsServer).PredictGraph(ctx, req.(*PredictGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graphs_TaskInNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphsServer).TaskInNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphs.Graphs/TaskInNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphsServer).TaskInNode(ctx, req.(*TaskInNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Graphs_ServiceDesc is the grpc.ServiceDesc for Graphs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Graphs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graphs.Graphs",
	HandlerType: (*GraphsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroupGraph",
			Handler:    _Graphs_CreateGroupGraph_Handler,
		},
		{
			MethodName: "ListGroupGraphs",
			Handler:    _Graphs_ListGroupGraphs_Handler,
		},
		{
			MethodName: "GetGraph",
			Handler:    _Graphs_GetGraph_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Graphs_GetNode_Handler,
		},
		{
			MethodName: "CreateNode",
			Handler:    _Graphs_CreateNode_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _Graphs_UpdateNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _Graphs_RemoveNode_Handler,
		},
		{
			MethodName: "GetDependencies",
			Handler:    _Graphs_GetDependencies_Handler,
		},
		{
			MethodName: "AddDependency",
			Handler:    _Graphs_AddDependency_Handler,
		},
		{
			MethodName: "RemoveDependency",
			Handler:    _Graphs_RemoveDependency_Handler,
		},
		{
			MethodName: "PredictGraph",
			Handler:    _Graphs_PredictGraph_Handler,
		},
		{
			MethodName: "TaskInNode",
			Handler:    _Graphs_TaskInNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "graphs_service/graphs_service.proto",
}
