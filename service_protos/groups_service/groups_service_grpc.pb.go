// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.30.1
// source: groups_service/groups_service.proto

package groups

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupsClient is the client API for Groups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupsClient interface {
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupID, error)
	ListUserGroups(ctx context.Context, in *Padding, opts ...grpc.CallOption) (*GroupsList, error)
	GetGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*Group, error)
	DeleteGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListGroupMembers(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*GroupMembersList, error)
	AddGroupMember(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveGroupMember(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeMemberRole(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckAdminPermission(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckEditorPermission(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckMemberPermission(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type groupsClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupsClient(cc grpc.ClientConnInterface) GroupsClient {
	return &groupsClient{cc}
}

func (c *groupsClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupID, error) {
	out := new(GroupID)
	err := c.cc.Invoke(ctx, "/groups.Groups/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) ListUserGroups(ctx context.Context, in *Padding, opts ...grpc.CallOption) (*GroupsList, error) {
	out := new(GroupsList)
	err := c.cc.Invoke(ctx, "/groups.Groups/ListUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) GetGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/groups.Groups/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) DeleteGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groups.Groups/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groups.Groups/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) ListGroupMembers(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*GroupMembersList, error) {
	out := new(GroupMembersList)
	err := c.cc.Invoke(ctx, "/groups.Groups/ListGroupMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) AddGroupMember(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groups.Groups/AddGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) RemoveGroupMember(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groups.Groups/RemoveGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) ChangeMemberRole(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groups.Groups/ChangeMemberRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) CheckAdminPermission(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groups.Groups/CheckAdminPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) CheckEditorPermission(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groups.Groups/CheckEditorPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) CheckMemberPermission(ctx context.Context, in *GroupMember, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/groups.Groups/CheckMemberPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupsServer is the server API for Groups service.
// All implementations must embed UnimplementedGroupsServer
// for forward compatibility
type GroupsServer interface {
	CreateGroup(context.Context, *Group) (*GroupID, error)
	ListUserGroups(context.Context, *Padding) (*GroupsList, error)
	GetGroup(context.Context, *GroupID) (*Group, error)
	DeleteGroup(context.Context, *GroupID) (*emptypb.Empty, error)
	UpdateGroup(context.Context, *Group) (*emptypb.Empty, error)
	ListGroupMembers(context.Context, *GroupID) (*GroupMembersList, error)
	AddGroupMember(context.Context, *GroupMember) (*emptypb.Empty, error)
	RemoveGroupMember(context.Context, *GroupMember) (*emptypb.Empty, error)
	ChangeMemberRole(context.Context, *GroupMember) (*emptypb.Empty, error)
	CheckAdminPermission(context.Context, *GroupMember) (*emptypb.Empty, error)
	CheckEditorPermission(context.Context, *GroupMember) (*emptypb.Empty, error)
	CheckMemberPermission(context.Context, *GroupMember) (*emptypb.Empty, error)
	mustEmbedUnimplementedGroupsServer()
}

// UnimplementedGroupsServer must be embedded to have forward compatible implementations.
type UnimplementedGroupsServer struct {
}

func (UnimplementedGroupsServer) CreateGroup(context.Context, *Group) (*GroupID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupsServer) ListUserGroups(context.Context, *Padding) (*GroupsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroups not implemented")
}
func (UnimplementedGroupsServer) GetGroup(context.Context, *GroupID) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGroupsServer) DeleteGroup(context.Context, *GroupID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupsServer) UpdateGroup(context.Context, *Group) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedGroupsServer) ListGroupMembers(context.Context, *GroupID) (*GroupMembersList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupMembers not implemented")
}
func (UnimplementedGroupsServer) AddGroupMember(context.Context, *GroupMember) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupMember not implemented")
}
func (UnimplementedGroupsServer) RemoveGroupMember(context.Context, *GroupMember) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupMember not implemented")
}
func (UnimplementedGroupsServer) ChangeMemberRole(context.Context, *GroupMember) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMemberRole not implemented")
}
func (UnimplementedGroupsServer) CheckAdminPermission(context.Context, *GroupMember) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAdminPermission not implemented")
}
func (UnimplementedGroupsServer) CheckEditorPermission(context.Context, *GroupMember) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEditorPermission not implemented")
}
func (UnimplementedGroupsServer) CheckMemberPermission(context.Context, *GroupMember) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMemberPermission not implemented")
}
func (UnimplementedGroupsServer) mustEmbedUnimplementedGroupsServer() {}

// UnsafeGroupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupsServer will
// result in compilation errors.
type UnsafeGroupsServer interface {
	mustEmbedUnimplementedGroupsServer()
}

func RegisterGroupsServer(s grpc.ServiceRegistrar, srv GroupsServer) {
	s.RegisterService(&Groups_ServiceDesc, srv)
}

func _Groups_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groups.Groups/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_ListUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Padding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).ListUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groups.Groups/ListUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).ListUserGroups(ctx, req.(*Padding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groups.Groups/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).GetGroup(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groups.Groups/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).DeleteGroup(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groups.Groups/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).UpdateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_ListGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).ListGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groups.Groups/ListGroupMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).ListGroupMembers(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_AddGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).AddGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groups.Groups/AddGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).AddGroupMember(ctx, req.(*GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_RemoveGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).RemoveGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groups.Groups/RemoveGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).RemoveGroupMember(ctx, req.(*GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_ChangeMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).ChangeMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groups.Groups/ChangeMemberRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).ChangeMemberRole(ctx, req.(*GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_CheckAdminPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).CheckAdminPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groups.Groups/CheckAdminPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).CheckAdminPermission(ctx, req.(*GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_CheckEditorPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).CheckEditorPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groups.Groups/CheckEditorPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).CheckEditorPermission(ctx, req.(*GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_CheckMemberPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).CheckMemberPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groups.Groups/CheckMemberPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).CheckMemberPermission(ctx, req.(*GroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

// Groups_ServiceDesc is the grpc.ServiceDesc for Groups service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Groups_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "groups.Groups",
	HandlerType: (*GroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _Groups_CreateGroup_Handler,
		},
		{
			MethodName: "ListUserGroups",
			Handler:    _Groups_ListUserGroups_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _Groups_GetGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Groups_DeleteGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Groups_UpdateGroup_Handler,
		},
		{
			MethodName: "ListGroupMembers",
			Handler:    _Groups_ListGroupMembers_Handler,
		},
		{
			MethodName: "AddGroupMember",
			Handler:    _Groups_AddGroupMember_Handler,
		},
		{
			MethodName: "RemoveGroupMember",
			Handler:    _Groups_RemoveGroupMember_Handler,
		},
		{
			MethodName: "ChangeMemberRole",
			Handler:    _Groups_ChangeMemberRole_Handler,
		},
		{
			MethodName: "CheckAdminPermission",
			Handler:    _Groups_CheckAdminPermission_Handler,
		},
		{
			MethodName: "CheckEditorPermission",
			Handler:    _Groups_CheckEditorPermission_Handler,
		},
		{
			MethodName: "CheckMemberPermission",
			Handler:    _Groups_CheckMemberPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "groups_service/groups_service.proto",
}
