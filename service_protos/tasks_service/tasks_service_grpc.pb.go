// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.30.1
// source: tasks_service/tasks_service.proto

package tasks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TasksClient is the client API for Tasks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TasksClient interface {
	CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*TaskID, error)
	GetTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*Task, error)
	GetTaskList(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskList, error)
	UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PredictTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*PredictedTask, error)
	TaskExists(ctx context.Context, in *TaskExistsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGroupTasks(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*TaskList, error)
	GetPredictedTasks(ctx context.Context, in *TasksIDs, opts ...grpc.CallOption) (*PredictedTaskList, error)
	TaskDone(ctx context.Context, in *TaskDoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tasksClient struct {
	cc grpc.ClientConnInterface
}

func NewTasksClient(cc grpc.ClientConnInterface) TasksClient {
	return &tasksClient{cc}
}

func (c *tasksClient) CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*TaskID, error) {
	out := new(TaskID)
	err := c.cc.Invoke(ctx, "/tasks.Tasks/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/tasks.Tasks/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetTaskList(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskList, error) {
	out := new(TaskList)
	err := c.cc.Invoke(ctx, "/tasks.Tasks/GetTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tasks.Tasks/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) DeleteTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tasks.Tasks/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) PredictTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*PredictedTask, error) {
	out := new(PredictedTask)
	err := c.cc.Invoke(ctx, "/tasks.Tasks/PredictTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) TaskExists(ctx context.Context, in *TaskExistsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tasks.Tasks/TaskExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetGroupTasks(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*TaskList, error) {
	out := new(TaskList)
	err := c.cc.Invoke(ctx, "/tasks.Tasks/GetGroupTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) GetPredictedTasks(ctx context.Context, in *TasksIDs, opts ...grpc.CallOption) (*PredictedTaskList, error) {
	out := new(PredictedTaskList)
	err := c.cc.Invoke(ctx, "/tasks.Tasks/GetPredictedTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) TaskDone(ctx context.Context, in *TaskDoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tasks.Tasks/TaskDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TasksServer is the server API for Tasks service.
// All implementations must embed UnimplementedTasksServer
// for forward compatibility
type TasksServer interface {
	CreateTask(context.Context, *Task) (*TaskID, error)
	GetTask(context.Context, *TaskID) (*Task, error)
	GetTaskList(context.Context, *TaskListRequest) (*TaskList, error)
	UpdateTask(context.Context, *Task) (*emptypb.Empty, error)
	DeleteTask(context.Context, *TaskID) (*emptypb.Empty, error)
	PredictTask(context.Context, *TaskID) (*PredictedTask, error)
	TaskExists(context.Context, *TaskExistsRequest) (*emptypb.Empty, error)
	GetGroupTasks(context.Context, *GroupID) (*TaskList, error)
	GetPredictedTasks(context.Context, *TasksIDs) (*PredictedTaskList, error)
	TaskDone(context.Context, *TaskDoneRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTasksServer()
}

// UnimplementedTasksServer must be embedded to have forward compatible implementations.
type UnimplementedTasksServer struct {
}

func (UnimplementedTasksServer) CreateTask(context.Context, *Task) (*TaskID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTasksServer) GetTask(context.Context, *TaskID) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTasksServer) GetTaskList(context.Context, *TaskListRequest) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskList not implemented")
}
func (UnimplementedTasksServer) UpdateTask(context.Context, *Task) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTasksServer) DeleteTask(context.Context, *TaskID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTasksServer) PredictTask(context.Context, *TaskID) (*PredictedTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictTask not implemented")
}
func (UnimplementedTasksServer) TaskExists(context.Context, *TaskExistsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskExists not implemented")
}
func (UnimplementedTasksServer) GetGroupTasks(context.Context, *GroupID) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupTasks not implemented")
}
func (UnimplementedTasksServer) GetPredictedTasks(context.Context, *TasksIDs) (*PredictedTaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictedTasks not implemented")
}
func (UnimplementedTasksServer) TaskDone(context.Context, *TaskDoneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskDone not implemented")
}
func (UnimplementedTasksServer) mustEmbedUnimplementedTasksServer() {}

// UnsafeTasksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TasksServer will
// result in compilation errors.
type UnsafeTasksServer interface {
	mustEmbedUnimplementedTasksServer()
}

func RegisterTasksServer(s grpc.ServiceRegistrar, srv TasksServer) {
	s.RegisterService(&Tasks_ServiceDesc, srv)
}

func _Tasks_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.Tasks/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).CreateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.Tasks/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).GetTask(ctx, req.(*TaskID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_GetTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).GetTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.Tasks/GetTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).GetTaskList(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.Tasks/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).UpdateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.Tasks/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).DeleteTask(ctx, req.(*TaskID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_PredictTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).PredictTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.Tasks/PredictTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).PredictTask(ctx, req.(*TaskID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_TaskExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).TaskExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.Tasks/TaskExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).TaskExists(ctx, req.(*TaskExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_GetGroupTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).GetGroupTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.Tasks/GetGroupTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).GetGroupTasks(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_GetPredictedTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TasksIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).GetPredictedTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.Tasks/GetPredictedTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).GetPredictedTasks(ctx, req.(*TasksIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_TaskDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).TaskDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.Tasks/TaskDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).TaskDone(ctx, req.(*TaskDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tasks_ServiceDesc is the grpc.ServiceDesc for Tasks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tasks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tasks.Tasks",
	HandlerType: (*TasksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _Tasks_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Tasks_GetTask_Handler,
		},
		{
			MethodName: "GetTaskList",
			Handler:    _Tasks_GetTaskList_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Tasks_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Tasks_DeleteTask_Handler,
		},
		{
			MethodName: "PredictTask",
			Handler:    _Tasks_PredictTask_Handler,
		},
		{
			MethodName: "TaskExists",
			Handler:    _Tasks_TaskExists_Handler,
		},
		{
			MethodName: "GetGroupTasks",
			Handler:    _Tasks_GetGroupTasks_Handler,
		},
		{
			MethodName: "GetPredictedTasks",
			Handler:    _Tasks_GetPredictedTasks_Handler,
		},
		{
			MethodName: "TaskDone",
			Handler:    _Tasks_TaskDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tasks_service/tasks_service.proto",
}
